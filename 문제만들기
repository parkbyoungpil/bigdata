
#%% 2장
import pandas as pd
import numpy as np
#시리즈 만들기
temp = pd.Series([-0.8, -0.1, 7.7, 13.8, 18.0, 22.4,
                  25.9, 25.3, 21.0, 14.0, 9.6, -1.4])

#데이터프레임 만들기
temp1 = pd.DataFrame([[1,2,3,4],[5,6,7,8],[9,10,11,12]])

#인덱스 넣기
temp.index = ['바보', '멍충이','똥개']

#컬럼 넣기
temp.columns = ['바보','멍충이','똥개']

#인덱스로 여러개 찾기(끝값 포함인지 아닌지)
temp.iloc[[5,6,7]]
temp.iloc[5:8]

#레이블에 대한 인덱싱으로 여러개 찾기(끝값 포함인지 아닌지)
temp.loc['똥개']
temp.loc[5:8]

#조건문으로 찾기 2가지(하나는 Nan 안나오게)
temp.loc[(temp >= 15) & (temp < 30)]
temp.where(temp => 10).dropna()

#sum(),mean() 등 다나오는 함수
temp.discribe()

#인덱스와 값 한번에 추가하기(series)
temp.loc['temps'] = 30

#loc과 iloc중에 추가 Next_index에 추가가 가능한것 만들기
temp.loc[Next_idx] = 30
temp.iloc[Next_idx] = 30 #은 안돼

#시리즈 행 추가 가능한 다른 방법(적었는데 추가 안되는 법도)
new = pd.Series[{'temps':30}]
temp = temp.append(new)
temp.append(new) #는 안돼
temp = pd.concat([temp, new])# 는 새로운 방법 concat

#index 무시하고 한번에 넣는법
temp = temp.append(pd.Series([60]),ignore_index = True)

#temp에 넣어서 레이블 인덱스가 있을때랑 없을때 행 버리는 방법 2개
temp = temp.drop('temps')
temp = temp.drop(1) #인덱스 없을때

#temp에 안넣고 위에거 바꾸는법
temp.drop('temps',inplace = True)
temp.drop(1,inplace = True)

#temp 객체를 동일한걸 가르키는 거랑 복사본 만들기
temp = temp1
temp = temp2.copy()

#%% 4장
import pandas as pd
import numpy as np

#경로 따와서 넣는법(엑셀과 csv 두개) 그리고 첫줄부터 데이터 있으면?
df = pd.read_excel(r"C:\Users\user\Downloads\dfdata\mpg.xlsx")
df = pd.read_csv(r"C:\Users\user\Downloads\dfdata\iris.csv",header = None)

#type등을 알려주는, 앞에 5개, 뒤에 5개, 행 수, 열 수, 정보확인 함수 다 쓰기
df.info()
df.head()
df.tail()
df.shape[0]
df.shape[1]
df.['columns'].unique()

#데이터프레임 모든거 다뽑는데 특정 행 하나 빼고
df.loc[: ~df.columns.isin(['Species'])]

#모든 기술통계, 특정 열 기술통계 출력
print(df.describe())
print(df['columns'].sum())

#df1에 컬럼 정렬한거 내림차순 앞에 5개만 출력, 문장이어쓰기 여기서 하자
df1 = df.sort_values(by = 'columns', ascending = False)\
    .head()
    
#조건에 맞는 변수를 새 컬럼에 넣기(math가 20보다 작으면 Fail 크면 Pass)
df['columns'] = np.where(df['math'] > 20, 'Pass', 'Fail')

#조건에 맞는 행 출력(1반이고 수학 60정 이상)(1,3,5반 해당하면 출럭)
df.query('nclass = 1 & math >= 60')  #괄호 묶으면 안돼
df.query('nclass in [1,3,5]')

#math 상위 10프로 출력
w = df['math'] >= df['math'].quantile(0.9)
print(df[w])

#0은 행 1은 열일때 열추가
df.insert(1,'columns',[n for n in range(12,23)])  #1은 열 위치 맨 뒤는 넣을 곳, 넣을 인덱스

#df 데이터 타입 확인
df = sns.load_dataset('df')
print(df.dtypes)

#자료형 변환
df['new_columns']=df['columns'].astype(str)

#행삭제 열삭제 하나씩
df.drop(['columns'],axis = 1)  #열삭제는 컬럼명이랑 뒤에가 1이어야함
df.drop(['index'],axis = 0)  #-------이거 삭제

#행 합계 열 합계
df1 = df[['math','english']]
print(df1.sum(axis=0))   #행합계 각 행의 합계를 하나로
df2 = df(['math','english'])
print(df2.sum(axis=1))   #열합계 각 열의 합계 여러개

#결측데이터 확인하기
df1 = df[df['columns'].isna()]

#결측데이터 = True일때 유효할때 = True일때 합 출력
df1 = df.isnull().sum()  #결측데이터 True
df1 = df.notnull().sum() #유효데이터 True

#결측데이터 삭제, 0으로 채우기, 열의 평균 넣기
df1 = df.dropna()
df1 = df.fillna(0)
df1 = df.drop(['date'],axis = 1)  #열의 평균 넣기
df1 = df1.fillna(df1.mean())

#데이터 두개 위아래, 양옆으로 붙이기
df3 = pd.concat([df1,df2],axis = 1)   #양옆 붙이기
df3 = pd.concat([df1,df2],axis = 0)   #위아래(print(df3.loc['0'])하면 2개 나옴)

#합칠때 없는거 출력 x, 없는거 Nan, df1다출력, df2다출력 하나씩
df3 = pd.merge(df1,df2,how = 'inner', on='고객번호')
df3 = pd.merge(df1,df2,how = 'outer', on='고객번호')
df3 = pd.merge(df1,df2,how = 'left', on='고객번호')
df3 = pd.merge(df1,df2,how = 'right', on='고객번호')

#반을 기준으로 요약하는데 math의 평균 반별로 나오게 그 반이 인덱스가 되지 않게도 같이
df.groupby('nclass', as_index = False).agg(colums = ('math','mean'))
df.groupby('nclass').mean()     #전부다

#man으로 나누고 drv한번 더 분류
df.groupby(['man','drv'])\
    .agg(mean_cty = ('cty','mean'))

#drv 갯수 세기
df['drv'].value_counts() #자동으로 큰 것부터 정렬(query불가)

#제조 회사 별로 suv 자동차의 도시(cty) 고속도로(hwy) 합산 연비 평균을 구해 내림차순 정렬하고 5개 출력
df.query('category == "suv"')\     #따옴표 주의
    .assign(total = (df['hwy'] + df['cty']) / 2)\
    .groupby('manufacturer')\
    .agg(mean_tot = ('total', 'mean'))\
    .sort_values('mean_tot',ascending = False)\
    .head()
    
#category에 따라 어떤 차종의 cty연비가 높은지 비교하는 것, 내림차순 정렬
df.groupby('category')\
    .agg(cty_mean = ('cty', 'mean'))
    .sort_values(by = 'mean_cty', ascending = False)
    
#어느 category의 hwy평균이 제일 높은지 알아보고 위에 3개 출력
df.groupby('category')\
    .agg(hwy_mean('hwy','mean'))\
    .sort_values(by = 'hwy_mean' ,ascending = False)
    .head(3)
    
#어떤 회사에서 compact차종을 가장 많이 생산하는지
df.qurey('cateory == "compact"')\
    .groupby('man')
    .agg(n = 'man','count')
    .sort_values('n',ascending = False)
    
#등급 나누기
dfexam.loc[0,'math']=1
math_grade = pd.cut(df['math'],bins,labels=['f','d','c','b','a'])  #bins는 점수들 6개 있어야함

#category 정렬순서
dfiris['Species'] = pd.Categorical(dfiris['Species'], categories=['versicolor','virsinica','setosa'],
                                   ordered=True)
#%% 5장
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#도수분포(갯수세기), 그걸 이용해서 비율 구하는 것 까지
fd.value_counts()/fd.size()

#센 것 활용해서 막대그래프 작성
fd = fd.value_counts()
fd.plot.bar(xlabel = 'columns',
             ylabel = 'columns1',
             rot = 0,
             title = '----')
plt.show()

#막대그래프 순서 바꾸기
fd = pd.Categorical(fd, categories = ['1', '2', '4', '3'], order = True) #order = True는 순서가 있는데이터
fd1 = fd.value_counts()

#가로 막대 그래프
fd.plot.barh(---)

#그래프 여백
plt.subplots_adjust(left = 0.2)

#원그래프 출력 (안에 내용 백분율로)
fd.plot.pie(ylabel = '',
            autopct = '%1,0f%%',  #얘가 백분율
            title = '')

#mpg.csv 파일에서 cls의 개수에 따른 분포에서 최대 5위까지의 cls 막대그래프와 원그래프로 나타내시오


#절사평균(데이터의 상위n%와 하위n%를 제외한 후 계산한 평균)과 중앙값 구하기
fd.median()
stats.trim_mean(fd,0.2)

#사분위수 구하기
print(fd.quantile([0.25, 0.5, 0.75]))

#분산과 표준편차
print(fd.var())  #분산
print(fd.std())  #표준편차 (값이 크면 실쳑차이 크다, 작으면 실력차이 작다)

#age열에 있는 nan제거하고 히스토그램 만들기
df1 = df.dropna(subset='age',axis = 0)  #열을 훑으면서 데이터 삭제하면 axis는 0이다
df['age'].plot.hist(ylabel = "----")

#두개의 그래프를 한번에 그리는데 투명도는0.3
df.query('sex=="male"')['age'].plot.hist(ylabel = '', alpha=0.3) #query는 조건무조건 조건
df.query('sex=="female"')['age'].plot.hist(ylabel = '',alpha = 0.3)

#연속된 데이터를 6개의 구간으로 나누고 정렬하지 않기
df['age'].value_counts(bins = 6, sort = False)  #sort=False해줘야 정렬안되고 구간순서대로 나옴

#그래프에서 x축 값의 회전각도, 격자, 막대의 색, 그래프의 크기를 정하는건?
rot = 30
color = 'b'
grid=True
figsize=(3,3)

#한글폰트와 마이너스부호 깨짐 방지
plt.rcParams['font.family']='Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False

#그래프 2,2로 화면분활
fig, axes = plt.subplots(nrows = 2, ncols = 2)

#분할영역에 그래프 작성
df['columns'].plot.hist(ax=axes[0,0])

#%% 6장
import pandas as pd
import numpy as np

#산점도 그래프 그리기
df.plot.scatter(x='wt',
                y='mpg',
                s=40,        #점 크기
                c='red',     #점 색
                marker='s')  #점 모양

#다중 산점도
vars = ['mpg','disp','drat','wt']
pd.plotting.scatter_matrix(df[vars])

#그룹마다 색 다르게해서 점 색 바꾸기
dict = {'setosa':'red','versicolor':'blue','virginica''green'}
colors = list(dict[key] for key in df.Species)  #df.Species로 접근 가능

for label, data in df.groupby('Species'):
    ax.scatter(x=data['Petal_Length'], y=data['Petal_Width'], s = 30,
               c=dict[label], marker='o', label = label)
    print(data)
    
#범례표시
ax.legend()

#상관계수 -0.9, 0.9 해석
상관계수가 -0.9이면 음의관계가 높다 0.9면 양의 관계가 높다 1이면 오차가 낮다 0이면 상관이없다.

#회귀식 계산하고 출력하기
m, b = np.polyfit(beers, bal, 1)
plt.plot(beers, m*np.array(beers)+b)

# a, b 변수간 상관계수 계산
df['a'].corr(df['b'])

#Species를 제외한 모든 변수들간의 상관계수
df1 = df.loc[:, ~df.columns.isin(['Species'])]
df1.corr()

#시리즈 만들때 index 1부터 시작하려면
df = pd.Series([1,2,3,4,5,6,7,8,9,0],
               index=list(range(1,10)))

#선그래프 만들기 점추가해서
fd.plot(title = '',
        xlabel = '',
        ylabel = ''
        linestyle = 'solid'
        marker = 'o')

#2개의 시리즈 합쳐서 1개의 데이터프레임 만들기
dict = {'df1': fd1, 'df2':fd2}  #fd가 시리즈, df가 colums명
fd = pd.DataFrame(dict,
                  index = list(range(1,13)))

#범례지정
plt.legend(loc='upper right')  #upper right 는 위치

#원하는 컬럼만 가져오기
df = df[['crim','rm','dis','tax','medv']]

#M으로 grp컬럼을 채우고 medv 25 넘으면 H, 17 이하면 L로 바꾸기
grp = pd.Series(['M' for i in range(len(df))])
grp.loc[df.medv >= 25.0] = 'H'
grp.loc[df.medv <= 17.0] = 'L'
df['grp'] = grp        #추가하는거

#H,M,L 순으로 하고 순서 있는거롤 정의하고 데이터타입 변경하기
new_odr = ['H','M','L']
new_dtype = CategoricalDtype(categories = new_odr, ordered=True)
df.grp = df.grp.astype(new_dtype)
df.grp.dtype

#주택가격 그룹별 분포 큰수로 정렬 안하고
df.grp.value_counts(sort = False)

#분활영역에 for문으로 그래프 그리기(한 그래프 안에 grp로 나누기)
for i in range(5):
    df[df.columns[i]].plot.hist(ax=axes[i//3,i%3], by = 'grp', grid =False
                                ylabel = '',xlabel = titles[i])

#다중 산점도인데 문자 빼고
pd.plotting.scatter_matrix(df.iloc[:,:5])

#문자 빼고 모든 변수 상관계수
df.iloc[:,:5].corr()

#반복문으로 점에 색 넣기
colors = list(dict[key] for key in df.grp)

#20240101부터 기간 6일
dates = pd.date_range('20240101',periods=6)

#6행 4열 짜리 난수 생성하고 coulmns는 ABCD
df = pd.DataFrame(np.random.randn(6,4),index = dates, columns = list('ABCD'))

#timestamp로 자료형 변환
df['new_date'] = pd.to_datetime(df['Date'])

#date에서 년도만 뽑아서 저장
df['Year'] = df['new_Date'].dt.year

#date에서 월 까지 넣기
df['Date_m'] = df['new_Date'].dt.to_period(freq='M')

#열 삭제
df.drop('Date',axis = 1, inplace = True) #원본변형

#index설정
df.set_index('new_Date', inplace = True)

#2015-07 포함된거 전부출력
df.loc['2015-07']

#오늘과의 차이
today = pd.to_datetime('2023-11-15')
df['time_diff'] = today-df.index

#10by7 그래프 해상도 120
plt.rcParams.update({'figure.figsize':(10,7),'figure.dpi:120'})

#plt 그래프 그리기
def plot_df(df,x,y,title="",xlabel'Date',ylabel='Value',dpi = 100):
    plt.figure(figsize=(16,5),dpi=dpi)
    plt.plot(x,y,color = 'tab:red')
    plt.gca().set(title,xlabel=xlabel,ylabel=ylabel)
    plt.show()
    
#data 받아올때 date를 index로
df2 = pd.read_csv(file_path, parse_dates=['date'],
                  index_col='date')

#일반컬럼으로 해서 수정할 수 있게
df2.reset_index(inplace=True)

#반복문으로 년도 가져오기
df2['year'] = [d.year for d in df2['date']]

#3글자로 요약하기(달)
df2.['month'] = [d.strftime('%b') for d in df2.date]

#표준점수는 무슨뜻?
Z=0이면 평균과 같은값
Z=+1이면 평균에서 1표준편차 떨어져있음

#각 값의 z점수 계산
z_scores = [(x - mean) / std for x in data]

#평균 표준편차 구하기
mean = np.mean(data)
std = np.std(data)

#scipy사용
from scipy import stats
z_scores_scipy = stats.zscore(data)

#표준선 구하기
plt.axhline(df["점수"].mean(), color = 'red', linestyle"--", label = "평균점수")

#표준넘수 계산하고 방사형 차트 데이터 준비
from scipy.stats import zscore
z_scores = zscore(scores)

num_vars = len(subjrects)
angles = np.linspace(0, 2*np.pi, num_vars, endpoint = False).tolist()
z_scores = z_scores.tolist()

#원형으로 만들기 위해 시작점 다시 추가!!!!!
z_scores += z_scores[:1]
angles += angles[:1]

#방사형 그래프 그리기
fig, ax = plt.subplots(figsize = (6,6),subplot_kw = dict(polar = True))
ax.plot(angles, z_scores, color = 'blue', linewidth = 2)
ax.fill(angles, z_scores, color = 'skyblue', alpha=0.4)

#라벨 설정
ax.set_xticks(angles[:-1])
ax.set_xticklabels(subjects)

#표준점수 눈금생성
ax.set_yticklabels(["-2","-1","0","1","0"])
plt.tight_layout()

#%% 7장

#중요한거
format = jason

#url가져올때 하드코딩ㅇ말고
for page in range(1,10)   #9페이지까지 가져옴
    hollys_url = "--%d--" %page

#url여는법
html = urllib.request.urlopen(Hollys_url)
soupHollys = BeautifulSoup(html,'html.parser')

#tbody찾는법
tag_tbody = soupHollys.find('tbody')

#tr 전부 찾고 td찾아서 text만 추출
for store in tag_tbody.find_all('tr'):
    if len(store) <= 3:
        break
    store_td = store.find_all('td')
    store_name = store_td[1].string
    store_sido = store_td[0].string
    result.append([store_name]+[store_sido])

#실시간 요청
html = re.get(url)

#contant를 바이트 형식으로 변환
html = html.content

#바디 찾기
body = soup.find('body')

#타고타고들어가기(#이 중요 아이디 rate info 타고 div타고 p안에 today)
body_tabel = body.select('#chart_area > div.rate_info > div > p.no_today')

#현재가 가져오기 text가 가격
return body_table[0].find('span').text

#json 응답
data = r.json()

#실제 도서정보 바탕 가져오기
books = []
for d in data['response']['docs'][:10]:
    doc = d['doc']
    books.append({
        "대출순위": doc.get('ranking')
        "제목": doc.get('bookname')
        "작가": doc.get('authors')
    })

return pd.DataFrame(books)
